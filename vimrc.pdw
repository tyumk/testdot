set nocompatible
scriptencoding utf-8
syntax on
" set cursorline
" set expandtab
set tabstop=4
set shiftwidth=4
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

" カーソル移動
noremap j <Left>zv
noremap k gj
noremap i gk
noremap l <Right>zv
noremap <Down> gj
noremap <Up>   gk
noremap h ^
noremap e <End>
noremap I 20gk
noremap J 10<Left>
noremap K 20gj
noremap L 10<Right>

inoremap <C-i> <Up>
inoremap <C-j> <Left>
inoremap <C-k> <Down>
inoremap <C-l> <Right>
" inoremap <C-h> <Home>
inoremap <C-e> <End>
inoremap <C-d> <Del>

inoremap <C-s> <ESC>
noremap s i
noremap S I

noremap t r
noremap T R

noremap r b
noremap R B

noremap c y
noremap C Y

noremap y t
noremap Y T

" スクロール
noremap <CR> <C-f>
noremap <BS> <C-b>
noremap <s-tAB> <C-y>
noremap <TAB> <C-e>

" カーソル位置の単語選択
noremap o viw

" タブで開く
noremap <C-t> <C-w>gf

" surround
vnoremap <Space>s d<Left><Left>p<Right>xx
vnoremap <Space>" di""<Esc><Left>p
vnoremap <Space>( di()<Esc><Left>p
vnoremap <Space>[ di[]<Esc><Left>p
vnoremap <Space>{ di{}<Esc><Left>p
vnoremap <Space>' di''<Esc><Left>p
vnoremap <Space>` di``<Esc><Left>p

"----------------------------------------
" エンコーディング指定
"----------------------------------------
" vimの内部エンコーディング指定
set encoding=utf-8
" 既存ファイルを開くためのエンコーディング指定（先頭ほど優先順位高）
set fileencodings=utf-8,cp932,sjis,ucs-bom,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213
" 新規ファイルのエンコーディング指定
set fileencoding=utf-8

"----------------------------------------
" システム設定
"----------------------------------------
" ファイルの上書きの前にバックアップを作る/作らない
" set writebackupを指定してもオプション 'backup' がオンでない限り、
" バックアップは上書きに成功した後に削除される。
set writebackup
" バックアップ/スワップファイルを作成する/しない
set backup

set directory=~/.vim/temp
set backupdir=~/.vim/temp

" クリップボードを共有
set clipboard=unnamed,autoselect
" Visual blockモードでフリーカーソルを有効にする :: 空行で引っ込まない
set virtualedit=block
" カーソルキーで行末／行頭の移動可能に設定
set whichwrap=b,s,[,],<,>
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" コマンドライン補完するときに強化されたものを使う ::コマンドの上のラインに表示されるあれ
set wildmenu
" マウスを有効にする
"if has('mouse')
"    set mouse=a
"endif
" pluginを使用可能にする
filetype plugin indent on

"----------------------------------------
" 検索
"----------------------------------------
" 検索の時に大文字小文字を区別しない
" ただし大文字小文字の両方が含まれている場合は大文字小文字を区別する
set ignorecase
set smartcase
" 検索時にファイルの最後まで行ったら最初に戻る
set wrapscan
" インクリメンタルサーチ
set incsearch
" 検索文字の強調表示
set hlsearch
" w,bの移動で認識する文字
" set iskeyword=a-z,A-Z,48-57,_,.,-,>
" vimgrep をデフォルトのgrepとする場合internal
" set grepprg=internal

"----------------------------------------
" 表示設定
"----------------------------------------
" スプラッシュ(起動時のメッセージ)を表示しない
" set shortmess+=I
" エラー時の音とビジュアルベルの抑制(gvimは.gvimrcで設定)
set noerrorbells
set novisualbell
set visualbell t_vb=
" マクロ実行中などの画面再描画を行わない
" set lazyredraw
" Windowsでディレクトリパスの区切り文字表示に / を使えるようにする
"set shellslash "vundleを使うときエラー
" 行番号表示
set number
"if version >= 703
    " 相対行番号表示(7.3)
    " set relativenumber
"endif
" 括弧の対応表示時間
"set showmatch matchtime=1
" タブを設定
" set ts=4 sw=4 sts=4
" 自動的にインデントする
set autoindent
" Cインデントの設定
set cinoptions+=:0
" タイトルを表示
set title
" コマンドラインの高さ (gvimはgvimrcで指定)
" set cmdheight=2
set laststatus=2
" コマンドをステータス行に表示
"set showcmd
" 画面最後の行をできる限り表示する
set display=lastline
" Tab、行末の半角スペースを明示的に表示する
set list
set listchars=tab:^\ ,trail:~
" ルーラー（右下に表示される行・列の番号）を表示する
set ruler
" シェルに渡すコマンドを囲む引用符
"set shellxquote=

""""""""""""""""""""""""""""""
" ステータスラインに文字コード等表示
" iconvが使用可能の場合、カーソル上の文字コードをエンコードに応じた表示にするFencB()を使用
""""""""""""""""""""""""""""""
if has('iconv')
    set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=[0x%{FencB()}]\ (%v,%l)/%L%8P\ 
else
    set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=\ (%v,%l)/%L%8P\ 
endif

" FencB() : カーソル上の文字コードをエンコードに応じた表示にする
function! FencB()
    let c = matchstr(getline('.'), '.', col('.') - 1)
    let c = iconv(c, &enc, &fenc)
    return s:Byte2hex(s:Str2byte(c))
endfunction

function! s:Str2byte(str)
    return map(range(len(a:str)), 'char2nr(a:str[v:val])')
endfunction

function! s:Byte2hex(bytes)
    return join(map(copy(a:bytes), 'printf("%02X", v:val)'), '')
endfunction

""""""""""""""""""""""""""""""
" 挿入モード時、ステータスラインのカラー変更
""""""""""""""""""""""""""""""
let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'

if has('syntax')
    augroup InsertHook
        autocmd!
        autocmd InsertEnter * call s:StatusLine('Enter')
        autocmd InsertLeave * call s:StatusLine('Leave')
    augroup END
endif
" if has('unix') && !has('gui_running')
"   " ESCですぐに反映されない対策
"   inoremap <silent> <ESC> <ESC>
" endif

let s:slhlcmd = ''
function! s:StatusLine(mode)
    if a:mode == 'Enter'
        silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
        silent exec g:hi_insert
    else
        highlight clear StatusLine
        silent exec s:slhlcmd
        redraw
    endif
endfunction

function! s:GetHighlight(hi)
    redir => hl
    exec 'highlight '.a:hi
    redir END
    let hl = substitute(hl, '[\r\n]', '', 'g')
    let hl = substitute(hl, 'xxx', '', '')
    return hl
endfunction

" ---------------------------------------------------------
" caw
" ---------------------------------------------------------
" NeoBundle 'tyru/caw.vim'
map <Space>c <Plug>(caw:I:toggle)

" ---------------------------------------------------------
" Unite
" ---------------------------------------------------------
" NeoBundle 'Shougo/unite.vim'
" NeoBundle 'Shougo/neomru.vim'
" NeoBundle 'Shougo/unite-outline'
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <Space> [unite]

nnoremap <silent> [unite]b  :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]f  :<C-u>Unite file<CR>
nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
nnoremap <silent> [unite]d  :<C-u>Unite directory<CR>
nnoremap <silent> [unite]m  :<C-u>Unite neomru/file<CR>
nnoremap <silent> [unite]t  :<C-u>Unite tab<CR>
nnoremap <silent> [unite]j  :<C-u>Unite jump<CR>
nnoremap <silent> [unite]g  :<C-u>Unite vimgrep<CR>
" nnoremap <silent> [unite]d  :<C-u>UniteWithCurrentDir
"         \ -buffer-name=files buffer bookmark file<CR>
" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir
"         \ -buffer-name=files -prompt=%\  buffer bookmark file<CR>
nnoremap <silent> [unite]r  :<C-u>Unite
        \ -buffer-name=register register<CR>

" Unite 実行中のキーマップ
autocmd FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()"{{{
      " Overwrite settings.
      nnoremap <buffer> j k
      nnoremap <buffer> k j
      " Runs "split" action by <C-s>.
      map <silent><buffer><expr> <C-s>     unite#do_action('split')
      map <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
      map <silent><buffer><expr> <C-d>     unite#do_action('cd')
    endfunction"}}}

" ---------------------------------------------------------
" VimFiler
" ---------------------------------------------------------
NeoBundle 'Shougo/vimfiler.vim'
noremap <Space>f :VimFiler<Enter>
noremap <Space>e :VimFilerExplorer<Enter>
" VimFiler 実行中のキーマップ
autocmd FileType vimfiler call s:vimfiler_my_settings()
    function! s:vimfiler_my_settings()"{{{
      " Overwrite settings.
      nnoremap <buffer> j k
      nnoremap <buffer> k j
      " Runs "split" action by <C-s>.
      map <silent><buffer><expr> <C-s>     vimfiler#do_action('split')
      map <silent><buffer><expr> <C-t>     vimfiler#do_action('tabopen')
      map <silent><buffer><expr> <C-d>     vimfiler#do_action('cd')
    endfunction"}}}

" ---------------------------------------------------------
" ヘルプ日本語化
" ---------------------------------------------------------
" NeoBundle 'vim-jp/vimdoc-ja'

" read local vimrc file
if filereadable($HOME."/.vimrc_local")
    source $HOME/.vimrc_local
endif



" ---------------------------------------------------------
" clang_complete
" ---------------------------------------------------------
" NeoBundleLazy 'Rip-Rip/clang_complete', {
"             \ 'autoload' : {'filetypes' : ['c', 'cpp']}
"             \ }
" " autocmd FileType cpp call s:cpp()
" " function! s:cpp()
" "     let g:clang_complete_auto=1
" "     let g:clang_use_library=0
" "     let g:clang_snippets=0
" "     let g:clang_complete_copen = 1
" " endfunction
"
" let g:clan_exec='clang.exe'
" let g:clang_close_preview = 1
" let g:clang_auto_select = 0
" " let g:clang_user_options='-I /usr/local/include -I /usr/local/gcc-4.8.2/include/c++/4.8.2 || exit 0'
" let g:clang_user_options='-I D:/yuki/include -I D:/yuki/include_cpp || exit 0'
" " ---------------------------------------------------------
" " snippet
" " ---------------------------------------------------------
" " NeoBundle 'Shougo/neosnippet'
" " NeoBundle 'Shougo/neosnippet-snippets'
" " " スニペットを展開するキーマッピング
" " " <Tab> で選択されているスニペットの展開を行う
" " " 選択されている候補がスニペットであれば展開し、
" " " それ以外であれば次の候補を選択する
" " " また、既にスニペットが展開されている場合は次のマークへと移動する
" " imap <expr><CR> neosnippet#expandable_or_jumpable() ?
" " \ "\<Plug>(neosnippet_expand_or_jump)"
" " \: "\<CR>"
" " " \: pumvisible() ? "\<C-n>" : "\<CR>"
" " smap <expr><CR> neosnippet#expandable_or_jumpable() ?
" " \ "\<Plug>(neosnippet_expand_or_jump)"
" " \: "\<CR>"
" "
" " " 現在の filetype のスニペットを編集する為のキーマッピング
" " " こうしておくことでサッと編集や追加などを行うことができる
" " " 以下の設定では新しいタブでスニペットファイルを開く
" " " nnoremap <Space>ns :execute "tabnew\|:NeoSnippetEdit ".&filetype<CR>
" "
" " " スニペットファイルの保存ディレクトリを設定
" " " let g:neosnippet#snippets_directory = "~/.neosnippet"
