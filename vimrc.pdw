set nocompatible
scriptencoding utf-8
syntax on
" set cursorline
set tabstop=4
set shiftwidth=4
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

" カーソル移動
noremap h <Left>zv
noremap j gj
noremap k gk
noremap l <Right>zv
noremap <Down> gj
noremap <Up>   gk
" noremap [ ^
" noremap ] <End>
noremap <C-a> <Home>
noremap <C-e> <End>
noremap K 20gk
noremap H 10<Left>
noremap J 20gj
noremap L 10<Right>

inoremap <C-p> <Up>
inoremap <C-b> <Left>
inoremap <C-n> <Down>
inoremap <C-f> <Right>
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-d> <Del>

" カーソル位置の単語選択
noremap o viw

"----------------------------------------
" vimfilesのpath
"----------------------------------------
if isdirectory($HOME.'/.vim')
    let $VIMFILES = $HOME.'/.vim'
elseif isdirectory($HOME.'\vimfiles')
    let $VIMFILES = $HOME.'\vimfiles'
elseif isdirectory($VIM.'\vimfiles')
    let $VIMFILES = $VIM.'\vimfiles'
endif

"----------------------------------------
" エンコーディング指定
"----------------------------------------
" vimの内部エンコーディング指定
set encoding=utf-8
" 既存ファイルを開くためのエンコーディング指定（先頭ほど優先順位高）
set fileencodings=utf-8,cp932,sjis,ucs-bom,iso-2022-jp-3,iso-2022-jp,eucjp-ms,euc-jisx0213
" 新規ファイルのエンコーディング指定
set fileencoding=utf-8

"----------------------------------------
" システム設定
"----------------------------------------
" ファイルの上書きの前にバックアップを作る/作らない
" set writebackupを指定してもオプション 'backup' がオンでない限り、
" バックアップは上書きに成功した後に削除される。
set writebackup
" バックアップ/スワップファイルを作成する/しない
set nobackup

set directory=$VIMFILES/temp
set backupdir=$VIMFILES/temp

" クリップボードを共有
set clipboard=unnamed,autoselect
" Visual blockモードでフリーカーソルを有効にする :: 空行で引っ込まない
set virtualedit=block
" カーソルキーで行末／行頭の移動可能に設定
set whichwrap=b,s,[,],<,>
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" コマンドライン補完するときに強化されたものを使う ::コマンドの上のラインに表示されるあれ
set wildmenu
" マウスを有効にする
"if has('mouse')
"    set mouse=a
"endif
" pluginを使用可能にする
filetype plugin indent on

"----------------------------------------
" 検索
"----------------------------------------
" 検索の時に大文字小文字を区別しない
" ただし大文字小文字の両方が含まれている場合は大文字小文字を区別する
set ignorecase
set smartcase
" 検索時にファイルの最後まで行ったら最初に戻る
set wrapscan
" インクリメンタルサーチ
set incsearch
" 検索文字の強調表示
set hlsearch
" w,bの移動で認識する文字
" set iskeyword=a-z,A-Z,48-57,_,.,-,>
" vimgrep をデフォルトのgrepとする場合internal
" set grepprg=internal

"----------------------------------------
" 表示設定
"----------------------------------------
" スプラッシュ(起動時のメッセージ)を表示しない
" set shortmess+=I
" エラー時の音とビジュアルベルの抑制(gvimは.gvimrcで設定)
set noerrorbells
set novisualbell
set visualbell t_vb=
" マクロ実行中などの画面再描画を行わない
" set lazyredraw
" Windowsでディレクトリパスの区切り文字表示に / を使えるようにする
"set shellslash "vundleを使うときエラー
" 行番号表示
set number
"if version >= 703
    " 相対行番号表示(7.3)
    " set relativenumber
"endif
" 括弧の対応表示時間
"set showmatch matchtime=1
" タブを設定
" set ts=4 sw=4 sts=4
" 自動的にインデントする
set autoindent
" Cインデントの設定
set cinoptions+=:0
" タイトルを表示
set title
" コマンドラインの高さ (gvimはgvimrcで指定)
" set cmdheight=2
set laststatus=2
" コマンドをステータス行に表示
"set showcmd
" 画面最後の行をできる限り表示する
set display=lastline
" Tab、行末の半角スペースを明示的に表示する
set list
set listchars=tab:^\ ,trail:~
" ルーラー（右下に表示される行・列の番号）を表示する
set ruler
" シェルに渡すコマンドを囲む引用符
"set shellxquote=

""""""""""""""""""""""""""""""
" ステータスラインに文字コード等表示
" iconvが使用可能の場合、カーソル上の文字コードをエンコードに応じた表示にするFencB()を使用
""""""""""""""""""""""""""""""
if has('iconv')
    set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=[0x%{FencB()}]\ (%v,%l)/%L%8P\ 
else
    set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=\ (%v,%l)/%L%8P\ 
endif

" FencB() : カーソル上の文字コードをエンコードに応じた表示にする
function! FencB()
    let c = matchstr(getline('.'), '.', col('.') - 1)
    let c = iconv(c, &enc, &fenc)
    return s:Byte2hex(s:Str2byte(c))
endfunction

function! s:Str2byte(str)
    return map(range(len(a:str)), 'char2nr(a:str[v:val])')
endfunction

function! s:Byte2hex(bytes)
    return join(map(copy(a:bytes), 'printf("%02X", v:val)'), '')
endfunction

"----------------------------------------
"  Shougo/neobundle
"----------------------------------------
if has('vim_starting')
   "set nocompatible               " Be iMproved

   " Required:
   set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" -------------------------------------------------------------------
" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

" ---------------------------------------------------------
" コメントアウト Space , c でコメントをつけたり消したり
" ---------------------------------------------------------
NeoBundle 'tyru/caw.vim'
map <Space>c <Plug>(caw:I:toggle)

" ---------------------------------------------------------
" neocomplete 補完
" ---------------------------------------------------------
" NeoBundle 'Shougo/neocomplete'
" 
" "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" " Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" " Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" " Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" " Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" 
" " Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
"     \ 'default' : '',
"     \ 'vimshell' : $HOME.'/.vimshell_hist',
"     \ 'scheme' : $HOME.'/.gosh_completions',
"     \ 'ruby' : $HOME.'/.vim/dict/ruby.dict'
"         \ }
" 
" " Define keyword.
" if !exists('g:neocomplete#keyword_patterns')
"     let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" 
" " Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-@>     neocomplete#complete_common_string()
" 
" " Recommended key-mappings.
" " <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
"   return neocomplete#close_popup() . "\<CR>"
"   " For no inserting <CR> key.
"   "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
" endfunction
" " <TAB>: completion.
" " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" " inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><C-y>  neocomplete#close_popup()
" inoremap <expr><C-e>  neocomplete#cancel_popup()
" " Close popup by <Space>.
" "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"
" 
" " For cursor moving in insert mode(Not recommended)
" "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
" "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
" "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
" "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" " Or set this.
" "let g:neocomplete#enable_cursor_hold_i = 1
" " Or set this.
" "let g:neocomplete#enable_insert_char_pre = 1
" 
" " AutoComplPop like behavior.
" "let g:neocomplete#enable_auto_select = 1
" 
" " Shell like behavior(not recommended).
" "set completeopt+=longest
" "let g:neocomplete#enable_auto_select = 1
" "let g:neocomplete#disable_auto_complete = 1
" "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
" 
" " Enable omni completion.
" " autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" " autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" " autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" " autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" " autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" 
" " Enable heavy omni completion.
" if !exists('g:neocomplete#sources#omni#input_patterns')
"   let g:neocomplete#sources#omni#input_patterns = {}
" endif
" "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" " let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
" " let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
" let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
" " For perlomni.vim setting.
" " https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" 
" if !exists('g:neocomplete#force_omni_input_patterns')
"   let g:neocomplete#force_omni_input_patterns = {}
" endif
" let g:neocomplete#force_overwrite_completefunc = 1
" let g:neocomplete#force_omni_input_patterns.c =
"       \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
" let g:neocomplete#force_omni_input_patterns.cpp =
"       \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
" " let g:neocomplete#force_omni_input_patterns.objc =
" "       \ '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)'
" " let g:neocomplete#force_omni_input_patterns.objcpp =
" "       \ '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)\|\h\w*::\w*'
" ---------------------------------------------------------
" vim-clang
" ---------------------------------------------------------
NeoBundle 'justmao945/vim-clang'

" ---------------------------------------------------------
" Unite
" ---------------------------------------------------------
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite-outline'
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <Space> [unite]

nnoremap <silent> [unite]b  :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]f  :<C-u>Unite file<CR>
nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
nnoremap <silent> [unite]d  :<C-u>Unite directory<CR>
nnoremap <silent> [unite]m  :<C-u>Unite neomru/file<CR>
nnoremap <silent> [unite]t  :<C-u>Unite tab<CR>
nnoremap <silent> [unite]j  :<C-u>Unite jump<CR>
nnoremap <silent> [unite]g  :<C-u>Unite vimgrep<CR>
" nnoremap <silent> [unite]d  :<C-u>UniteWithCurrentDir
"         \ -buffer-name=files buffer bookmark file<CR>
" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir
"         \ -buffer-name=files -prompt=%\  buffer bookmark file<CR>
nnoremap <silent> [unite]r  :<C-u>Unite
        \ -buffer-name=register register<CR>

" Unite 実行中のキーマップ
autocmd FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()"{{{
      " Overwrite settings.
      " Runs "split" action by <C-s>.
      map <silent><buffer><expr> <C-s>     unite#do_action('split')
      map <silent><buffer><expr> <C-t>     unite#do_action('tabopen')
      map <silent><buffer><expr> <C-d>     unite#do_action('cd')
    endfunction"}}}

" ---------------------------------------------------------
" ヘルプ日本語化
" ---------------------------------------------------------
NeoBundle 'vim-jp/vimdoc-ja'

"  ----------------------------------------------------------------- my bundles
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" read local vimrc file
if filereadable($HOME."/.vimrc_local")
    source $HOME/.vimrc_local
endif

